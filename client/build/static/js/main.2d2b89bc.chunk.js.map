{"version":3,"sources":["components/styledComponents/lakeTile-sc.js","actions/lake-actions.js","components/lakeTile.js","App.js","reducers/lake-reducer.js","reducers/index.js","api/lake-api.js","sagas/lake-saga.js","index.js"],"names":["LakeTile","styled","button","_templateObject","actions","SELECT_TILE","GET_LAKES","GET_LAKES_SUCCESS","GET_LAKES_FAILURE","getLakes","type","payload","Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFocus","setState","display","state","count","firstFlag","handleBlur","handleClick","getLakeName","lakes","length","lake_name","react_default","a","createElement","onClick","onFocus","onBlur","Component","connect","LakesReducer","dispatch","bindActionCreators","App","lakeTile","initialState","arguments","undefined","action","assign","console","log","rootReducer","combineReducers","getLake","fetch","then","response","json","myJson","mySaga","regenerator_default","wrap","_context","prev","next","sent","put","t0","message","stop","_marked","_context2","takeLatest","_marked2","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","getState","subscribe","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2d2b89bc.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const LakeTile = styled.button`\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00ccff;\r\n\tbox-shadow: none;\r\n\tborder: none;\r\n\r\n\t&:hover {\r\n\t\tbackground: #4ddbff;\r\n\t}\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t\tbackground: #00a3cc;\r\n\t}\r\n`;","export const actions = {\r\n\tSELECT_TILE: 'SELECT_TILE',\r\n\tGET_LAKES: 'GET_LAKES',\r\n\tGET_LAKES_SUCCESS: 'GET_LAKES_SUCCESS',\r\n\tGET_LAKES_FAILURE: 'GET_LAKES_FAILURE',\r\n}\r\n\r\nexport const selectTile = () => ({\r\n\ttype: actions.SELECT_TILE,\r\n\tpayload: null,\r\n});\r\n\r\nexport const getLakes = () => ({\r\n\ttype: actions.GET_LAKES,\r\n\tpayload: null,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { LakeTile } from './styledComponents/lakeTile-sc';\r\n\r\nimport { getLakes } from '../actions/lake-actions';\r\n\r\nclass Tile extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tcount: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: \"><>\",\r\n\t\t\tfirstFlag: false,\r\n\t\t})\r\n\t\tthis.props.getLakes();\r\n\t}\r\n\r\n\thandleFocus = () => {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: this.state.count,\r\n\t\t\tfirstFlag: true,\r\n\t\t})\r\n\t}\r\n\r\n\thandleBlur = () => {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: \"><>\"\r\n\t\t})\r\n\t}\r\n\r\n\thandleClick = () => {\r\n\t\tif (this.state.firstFlag === true) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: this.state.count,\r\n\t\t\t\tfirstFlag: false,\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcount: ++this.state.count,\r\n\t\t\t\tdisplay: this.state.count,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tgetLakeName = () => {\r\n\t\tif (this.props.lakes.length) {\r\n\t\t\treturn this.props.lakes[0].lake_name;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.getLakeName()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<LakeTile onClick={this.handleClick} onFocus={this.handleFocus} onBlur={this.handleBlur}>\r\n\t\t\t\t\t{this.state.display}\r\n\t\t\t\t</LakeTile>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tlakes: state.LakesReducer.lakes\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn bindActionCreators({ getLakes: getLakes }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tile);","import React, { Component } from 'react';\r\nimport Tile from './components/lakeTile';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Tile></Tile>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { actions } from '../actions/lake-actions';\r\n\r\nconst initialState = {\r\n\t\tlakes: [],\r\n\t}\r\n\r\nfunction LakesReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase actions.GET_LAKES_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tlakes: action.payload\r\n\t\t\t})\r\n\t\tcase actions.GET_LAKES_FAILURE:\r\n\t\t\tconsole.log(\"Failed \",action.payload);\r\n\t\t\treturn state\r\n\t\tdefault:\t\t\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default LakesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport LakesReducer from './lake-reducer';\r\nconst rootReducer = combineReducers({\r\n    LakesReducer,\r\n});\r\n\r\nexport default rootReducer;","export const getLake = () => {\r\n\tconst lake = fetch('/api/lakes')\r\n\t// const lake = fetch('http://localhost:8000/api/lakes')\r\n\t.then(function(response) {\r\n\t\treturn response.json();\r\n\t})\r\n\t.then(function(myJson) {\r\n\t\treturn myJson;\r\n\t});\r\n\r\n\treturn lake;\r\n}","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { actions } from '../actions/lake-actions';\r\nimport { getLake } from '../api/lake-api';\r\n\r\nfunction* getLakes(action) {\r\n\ttry {\r\n\t\tconst lakes = yield call(getLake, action.payload);\r\n\t\tyield put({type: actions.GET_LAKES_SUCCESS, payload: lakes});\r\n\t} catch (e) {\r\n\t\tyield put({type: actions.GET_LAKES_FAILURE, message: e.message});\r\n\t}\r\n}\r\n\r\nfunction* mySaga() {\r\n\tyield takeLatest(actions.GET_LAKES, getLakes);\r\n}\r\n\r\nexport default mySaga;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducers';\r\nimport mySaga from './sagas/lake-saga';\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n// mount it on the Store\r\nconst store = createStore(\r\n\trootReducer,\r\n\tapplyMiddleware(sagaMiddleware)\r\n);\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga);\r\n\r\n// Log the initial state\r\nconsole.log(store.getState())\r\n\r\n// Every time the state changes, log it\r\n// Note that subscribe() returns a function for unregistering the listener\r\nconst unsubscribe = store.subscribe(() => console.log(store.getState()))\r\n\r\n// render the application\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n\r\n// Stop listening to state updates\r\n// unsubscribe()"],"sourceRoot":""}