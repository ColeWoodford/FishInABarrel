{"version":3,"sources":["components/styledComponents/lakeTile-sc.js","actions/lake-actions.js","components/lakeTile.js","App.js","serviceWorker.js","reducers/lake-reducer.js","reducers/index.js","api/lake-api.js","sagas/lake-saga.js","index.js"],"names":["LakeTile","styled","button","_templateObject","actions","SELECT_TILE","GET_LAKES","GET_LAKES_SUCCESS","GET_LAKES_FAILURE","getLakes","type","payload","Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFocus","setState","display","state","count","firstFlag","handleBlur","handleClick","getLakeName","lakes","length","lakeName","react_default","a","createElement","onClick","onFocus","onBlur","Component","connect","LakesReducer","dispatch","bindActionCreators","App","lakeTile","Boolean","window","location","hostname","match","initialState","arguments","undefined","action","assign","console","log","rootReducer","combineReducers","getLake","fetch","then","response","json","myJson","mySaga","regenerator_default","wrap","_context","prev","next","sent","put","t0","message","stop","_marked","_context2","takeLatest","_marked2","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","getState","subscribe","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d827127.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const LakeTile = styled.button`\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00ccff;\r\n\tbox-shadow: none;\r\n\tborder: none;\r\n\r\n\t&:hover {\r\n\t\tbackground: #4ddbff;\r\n\t}\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t\tbackground: #00a3cc;\r\n\t}\r\n`;","export const actions = {\r\n\tSELECT_TILE: 'SELECT_TILE',\r\n\tGET_LAKES: 'GET_LAKES',\r\n\tGET_LAKES_SUCCESS: 'GET_LAKES_SUCCESS',\r\n\tGET_LAKES_FAILURE: 'GET_LAKES_FAILURE',\r\n}\r\n\r\nexport const selectTile = () => ({\r\n\ttype: actions.SELECT_TILE,\r\n\tpayload: null,\r\n});\r\n\r\nexport const getLakes = () => ({\r\n\ttype: actions.GET_LAKES,\r\n\tpayload: null,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { LakeTile } from './styledComponents/lakeTile-sc';\r\n\r\nimport { getLakes } from '../actions/lake-actions';\r\n\r\nclass Tile extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tcount: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: \"><>\",\r\n\t\t\tfirstFlag: false,\r\n\t\t})\r\n\t\tthis.props.getLakes();\r\n\t}\r\n\r\n\thandleFocus = () => {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: this.state.count,\r\n\t\t\tfirstFlag: true,\r\n\t\t})\r\n\t}\r\n\r\n\thandleBlur = () => {\r\n\t\tthis.setState({\r\n\t\t\tdisplay: \"><>\"\r\n\t\t})\r\n\t}\r\n\r\n\thandleClick = () => {\r\n\t\tif (this.state.firstFlag === true) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: this.state.count,\r\n\t\t\t\tfirstFlag: false,\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcount: ++this.state.count,\r\n\t\t\t\tdisplay: this.state.count,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tgetLakeName = () => {\r\n\t\tif (this.props.lakes.length) {\r\n\t\t\treturn this.props.lakes[0].lakeName;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.getLakeName()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<LakeTile onClick={this.handleClick} onFocus={this.handleFocus} onBlur={this.handleBlur}>\r\n\t\t\t\t\t{this.state.display}\r\n\t\t\t\t</LakeTile>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tlakes: state.LakesReducer.lakes\r\n\t};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn bindActionCreators({ getLakes: getLakes }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tile);","import React, { Component } from 'react';\r\nimport Tile from './components/lakeTile';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Tile></Tile>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { actions } from '../actions/lake-actions';\r\n\r\nconst initialState = {\r\n\t\tlakes: [],\r\n\t}\r\n\r\nfunction LakesReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase actions.GET_LAKES_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tlakes: action.payload\r\n\t\t\t})\r\n\t\tcase actions.GET_LAKES_FAILURE:\r\n\t\t\tconsole.log(\"Failed \",action.payload);\r\n\t\t\treturn state\r\n\t\tdefault:\t\t\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default LakesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport LakesReducer from './lake-reducer';\r\nconst rootReducer = combineReducers({\r\n    LakesReducer,\r\n});\r\n\r\nexport default rootReducer;","export const getLake = () => {\r\n\tconst lake = fetch('http://localhost:8000/api/lakes')\r\n\t.then(function(response) {\r\n\t\treturn response.json();\r\n\t})\r\n\t.then(function(myJson) {\r\n\t\treturn myJson;\r\n\t});\r\n\r\n\treturn lake;\r\n}","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { actions } from '../actions/lake-actions';\r\nimport { getLake } from '../api/lake-api';\r\n\r\nfunction* getLakes(action) {\r\n\ttry {\r\n\t\tconst lakes = yield call(getLake, action.payload);\r\n\t\tyield put({type: actions.GET_LAKES_SUCCESS, payload: lakes});\r\n\t} catch (e) {\r\n\t\tyield put({type: actions.GET_LAKES_FAILURE, message: e.message});\r\n\t}\r\n}\r\n\r\nfunction* mySaga() {\r\n\tyield takeLatest(actions.GET_LAKES, getLakes);\r\n}\r\n\r\nexport default mySaga;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducers';\r\nimport mySaga from './sagas/lake-saga';\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n// mount it on the Store\r\nconst store = createStore(\r\n\trootReducer,\r\n\tapplyMiddleware(sagaMiddleware)\r\n);\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga);\r\n\r\n// Log the initial state\r\nconsole.log(store.getState())\r\n\r\n// Every time the state changes, log it\r\n// Note that subscribe() returns a function for unregistering the listener\r\nconst unsubscribe = store.subscribe(() => console.log(store.getState()))\r\n\r\n// render the application\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// Stop listening to state updates\r\n// unsubscribe()"],"sourceRoot":""}